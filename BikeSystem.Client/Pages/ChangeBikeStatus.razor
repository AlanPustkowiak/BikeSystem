@page "/ChangeBikeStatus/{id:int}"
@inject IBikeRepairService BikeRepairService
@inject IBikeService BikeService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<h4>Informacje o zleceniu:</h4>
<p>Rower: @GetBikeName(bikeRepair.BikeId)</p>
<p>Opis: @bikeRepair.Description</p>
<p>Aktualny Status: @oldStatus</p>

<h3>Zmień status:</h3>
<EditForm Model="@bikeRepair" OnValidSubmit="@ChangeStatus" FormName="bikeRepairStatusEdit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <InputSelect class="form-select w-25" @bind-Value="bikeRepair.Status">
            <option value="Oczekuje">Oczekuje</option>
            <option value="W trakcie">W trakcie</option>
            <option value="Zakończono">Zakończono</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary mt-2">Akceptuj</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private BikeRepair bikeRepair { get; set; }

    private string oldStatus = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        bikeRepair = await BikeRepairService.GetBikeRepairById(Id);
        oldStatus = bikeRepair.Status;
    }

    public async Task ChangeStatus()
    {
        await BikeRepairService.UpdateBikeRepair(Id, bikeRepair);
        NavigationManager.NavigateTo("/UserBikeStatusList");
    }

    public string GetBikeName(int bikeId)
    {
        var bike = BikeService.GetBikeById(bikeId).Result;
        return bike.Name;
    }
}
