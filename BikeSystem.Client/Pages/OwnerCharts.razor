@page "/ownercharts"
@inject IBikeRepairService BikeRepairService
@inject IUserService UserService
@rendermode InteractiveServer

@if (user.Role == "Owner")
{
    <h3>Info Charts</h3>
    <div class="d-flex flex-row justify-content-between">
        <BarChart @ref="barChart" Width="700" Height="500" />
        <PieChart @ref="pieChart" Width="500" />
    </div>
}
else
{
    <div class="d-flex justify-content-center aling-items-center">
        <p>Brak dostępu!</p>
    </div>
}
@code {
    private Users? user;
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;
    private List<double?> data = default!;
    private List<double?> data1 = default!;

    private PieChart pieChart = default!;
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData1 = default!;
    private string[]? backgroundColors;
    private List<string> pieDataCat = default!;

    private int datasetsCount = 0;
    private int dataLabelsCount = 0;

    private Random random = new();


    protected override async Task OnInitializedAsync()
    {
        user = await UserService.IsLogged();
        data = await BikeRepairService.GetRepairCountByStatus();
        data1 = await UserService.GetUsersByRoleCount();
        backgroundColors = ColorUtility.CategoricalTwelveColors;
        chartData1 = new ChartData { Labels = GetDefaultDataLabels(), Datasets = GetDefaultDataSets(1) };

        pieChartOptions = new();
        pieChartOptions.Responsive = true;
        pieChartOptions.Plugins.Title!.Text = "Users by role";
        pieChartOptions.Plugins.Title.Display = true;



        var labels = new List<string> { "Oczekuje", "W trakcie", "Zakończono" };
        var datasets = new List<IChartDataset>();

        var dataset1 = new BarChartDataset()
            {
                Data = data,
                BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                BorderWidth = new List<double> { 0 },
            };
        datasets.Add(dataset1);

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        barChartOptions = new BarChartOptions();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
        barChartOptions.IndexAxis = "y";

        barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Tickets", Display = true };
        barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Status", Display = true };

        barChartOptions.Plugins.Legend.Display = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (user.Role == "Owner" && chartData != null && chartData1 != null)
            {
                await barChart.InitializeAsync(chartData, barChartOptions);
                await pieChart.InitializeAsync(chartData1, pieChartOptions);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    #region Data Preparation

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
        {
            datasets.Add(GetRandomPieChartDataset());
        }

        return datasets;
    }

    private PieChartDataset GetRandomPieChartDataset()
    {
        return new() { Label = "Count", Data = data1, BackgroundColor = GetRandomBackgroundColors() };
    }

    private List<string> GetRandomBackgroundColors()
    {
        var colors = new List<string>();
        for (var index = 0; index < dataLabelsCount; index++)
        {
            colors.Add(backgroundColors![index]);
        }

        return colors;
    }

    private List<string> GetDefaultDataLabels()
    {
        pieDataCat = UserService.GetActiveRoleNames().Result;
        dataLabelsCount = 3;
        return pieDataCat;
    }

    private string GetNextDataBackgrounfColor() => backgroundColors![dataLabelsCount];

    #endregion  Data Preparation
}